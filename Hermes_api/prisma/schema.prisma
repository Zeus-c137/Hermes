// Use MySQL provider for Prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model: stores basic user info and KYC/verification status
model User {
  id            String   @id @default(uuid())           // Unique user ID (UUID)
  phone         String   @unique                       // Phone number (unique)
  email         String   @unique                       // Email address (unique)
  passwordHash  String                                // Hashed password
  kycVerified   Boolean  @default(false)               // Whether KYC (email) is verified
  otpCode       String?                               // One-time 6-digit OTP code for verification
  otpExpiresAt  DateTime?                             // OTP expiry timestamp
  walletAddress String?                               // Linked crypto wallet address (if provided)
  role          Role        // Role: "user" (default), "advanced", or "admin"
  gasCredit     Decimal  @default(0)                  // Gas credit (in UGX) for meta-transactions
  ugxCredit     Decimal  @default(0)                  // Off-chain UGX credit (if any)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations:
  transactions Transaction[]    // Transactions made by user
  mmJobs       MobileMoneyJob[] // Mobile money jobs initiated by user
  gasDrips     GasDrip[]        // Gas credit usage or top-up records
}

// Transaction model: records mint, redeem, and send transactions for history
model Transaction {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  type       TransactionType    // "MINT", "REDEEM", or "SEND"
  amountUGX  Decimal            // Amount in UGX involved
  ugdxAmount Decimal            // UGDX token amount (pegged 1:1 to UGX)
  toAddress  String?            // For SEND: target blockchain address (if on-chain transfer)
  toPhone    String?            // For SEND: target phone number (if sending to mobile money)
  txHash     String?            // Transaction hash for on-chain operations (if available)
  status     String   @default("PENDING")   // "PENDING", "COMPLETED", "FAILED"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  mmJob    MobileMoneyJob? @relation(fields: [mmJobId], references: [id])
  mmJobId  Int?
}

enum TransactionType {
  MINT
  REDEEM
  SEND
}

// MobileMoneyJob model: tracks interactions with the MM provider for deposits/withdrawals
model MobileMoneyJob {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  phone     String                              // Phone number for the MM transaction
  amount Decimal                             // Amount in UGX to collect or disburse
  type      MMJobType                           // "COLLECT" (deposit) or "DISBURSE" (withdrawal)
  provider  String                              // Provider used ("MTN" or "AIRTEL")
  trans_id  String?                             // Provider's transaction ID or reference (after completion)
  status    String   @default("PENDING")        // "PENDING", "SUCCESS", "FAIL"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transaction Transaction?
}

enum MMJobType {
  COLLECT    // Collect money from user (deposit)
  DISBURSE   // Disburse money to user (withdrawal)
}

// GasDrip model: logs gas credit allocations and usage per user (for meta-transactions)
model GasDrip {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Decimal                           // Amount of gas credit given or used (in UGX value)
  type      String                            // "DRIP" for credit given, "USE" for usage
  note      String?                           // Description or tx reference for context
  createdAt DateTime @default(now())
}

enum Role {
  USER
  HYPERADMIN
  ADVANCED
}